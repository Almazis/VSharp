METHOD: System.Collections.Generic.EqualityComparer`1[System.String] VSharp.Test.Tests.Reflection.TestEqualityComparer()
RESULT: Totally 1 state:
(HeapRef 10 to System.Collections.Generic.EqualityComparer`1[System.String])
MEMORY DUMP:
--------------- Fields: ---------------
typeInfo ==> {8 <- System.String}
--------------- Array lengths: ---------------
System.Type[] ==> {2[0] <- 0}
--------------- Types tokens: ---------------
2 ==> System.Type[]
3 ==> System.Reflection.Missing
4 ==> System.Reflection.MemberFilter
5 ==> System.Type+<>c
6 ==> System.Reflection.MemberFilter
7 ==> System.Reflection.MemberFilter
8 ==> System.RuntimeType
9 ==> System.Collections.Generic.ObjectEqualityComparer`1[System.String]
10 ==> System.Collections.Generic.ObjectEqualityComparer`1[System.String]
--------------- Static fields: ---------------
<>9 ==> {System.Type+<>c <- (HeapRef 5 to System.Type+<>c)}
<Default>k__BackingField ==> {
        System.Collections.Generic.EqualityComparer`1[System.String] <- (HeapRef 9 to System.Collections.Generic.EqualityComparer`1[System.String])
    }
Delimiter ==> {System.Type <- '.'}
EmptyTypes ==> {System.Type <- (HeapRef 2 to System.Type[])}
FilterAttribute ==> {
        System.Type <- (HeapRef 4 to System.Reflection.MemberFilter)
    }
FilterName ==> {
        System.Type <- (HeapRef 6 to System.Reflection.MemberFilter)
    }
FilterNameIgnoreCase ==> {
        System.Type <- (HeapRef 7 to System.Reflection.MemberFilter)
    }
Missing ==> {System.Type <- (HeapRef 3 to System.Object)}
Value ==> {
        System.Reflection.Missing <- (HeapRef 3 to System.Reflection.Missing)
    }
Value ==> {
        System.Array+EmptyArray`1[System.Type] <- (HeapRef 2 to System.Type[])
    }
s_defaultBinder ==> {System.Type <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Reflection.MemberFilter>
6 ==> <Lambda Expression System.Reflection.MemberFilter>
7 ==> <Lambda Expression System.Reflection.MemberFilter>
Initialized types = { System.Reflection.MemberFilter, System.Array, System.Type+<>c, System.Collections.Generic.ComparerHelpers, VSharp.Test.Tests.Reflection, System.Object, System.Array+EmptyArray`1[System.Type], System.Type, System.Reflection.Missing, System.Collections.Generic.EqualityComparer`1[System.String] }
