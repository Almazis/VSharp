METHOD: System.Boolean VSharp.Test.Tests.Unsafe.ArraySymbolicUnsafeWrite2(System.Int32)
RESULT: Totally 6 states:
True
MEMORY DUMP:
Path condition: 1 == 2[0] /\ 2 == 2[1] /\ 2[2] == 3 /\ 2[3] == 4 /\ 2[4] == 5
--------------- Concrete memory: ---------------
3 ==> System.Int32[]
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 1
        2[1] <- 2
        2[2] <- 3
        2[3] <- 4
        2[4] <- 5
        2[1 + i / 4] <- Combine(Slice(2[1 + i / 4], 0, -4 + -4 * i / 4 + i), Slice(216172782147338240, -i + 4 + 4 * i / 4, -i + 4 + 4 * i / 4 + 4), Slice(2[1 + i / 4], -4 + -4 * i / 4 + i + 8, 4))
        2[2 + i / 4] <- Combine(Slice(2[2 + i / 4], 0, -4 * i / 4 + -8 + i), Slice(216172782147338240, -i + 4 * i / 4 + 8, -i + 4 * i / 4 + 8 + 4), Slice(2[2 + i / 4], -4 * i / 4 + -8 + i + 8, 4))
        2[i / 4] <- Combine(Slice(2[i / 4], 0, -4 * i / 4 + i), Slice(216172782147338240, -i + 4 * i / 4, -i + 4 * i / 4 + 4), Slice(2[i / 4], -4 * i / 4 + i + 8, 4))
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 5}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = __loc__1, value = (HeapRef 3 to System.Int32[])
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
Initialized types = { VSharp.Test.Tests.Unsafe, System.Runtime.CompilerServices.RuntimeHelpers }

True
MEMORY DUMP:
Path condition: !(1 == i) /\ !(2 == 2[1]) /\ 1 == 2[0]
--------------- Concrete memory: ---------------
3 ==> System.Int32[]
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 1
        2[1] <- 2
        2[2] <- 3
        2[3] <- 4
        2[4] <- 5
        2[1 + i / 4] <- Combine(Slice(2[1 + i / 4], 0, -4 + -4 * i / 4 + i), Slice(216172782147338240, -i + 4 + 4 * i / 4, -i + 4 + 4 * i / 4 + 4), Slice(2[1 + i / 4], -4 + -4 * i / 4 + i + 8, 4))
        2[2 + i / 4] <- Combine(Slice(2[2 + i / 4], 0, -4 * i / 4 + -8 + i), Slice(216172782147338240, -i + 4 * i / 4 + 8, -i + 4 * i / 4 + 8 + 4), Slice(2[2 + i / 4], -4 * i / 4 + -8 + i + 8, 4))
        2[i / 4] <- Combine(Slice(2[i / 4], 0, -4 * i / 4 + i), Slice(216172782147338240, -i + 4 * i / 4, -i + 4 * i / 4 + 4), Slice(2[i / 4], -4 * i / 4 + i + 8, 4))
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 5}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = __loc__1, value = (HeapRef 3 to System.Int32[])
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
Initialized types = { VSharp.Test.Tests.Unsafe, System.Runtime.CompilerServices.RuntimeHelpers }

True
MEMORY DUMP:
Path condition: !(1 == 2[0]) /\ !(1 == i)
--------------- Concrete memory: ---------------
3 ==> System.Int32[]
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 1
        2[1] <- 2
        2[2] <- 3
        2[3] <- 4
        2[4] <- 5
        2[1 + i / 4] <- Combine(Slice(2[1 + i / 4], 0, -4 + -4 * i / 4 + i), Slice(216172782147338240, -i + 4 + 4 * i / 4, -i + 4 + 4 * i / 4 + 4), Slice(2[1 + i / 4], -4 + -4 * i / 4 + i + 8, 4))
        2[2 + i / 4] <- Combine(Slice(2[2 + i / 4], 0, -4 * i / 4 + -8 + i), Slice(216172782147338240, -i + 4 * i / 4 + 8, -i + 4 * i / 4 + 8 + 4), Slice(2[2 + i / 4], -4 * i / 4 + -8 + i + 8, 4))
        2[i / 4] <- Combine(Slice(2[i / 4], 0, -4 * i / 4 + i), Slice(216172782147338240, -i + 4 * i / 4, -i + 4 * i / 4 + 4), Slice(2[i / 4], -4 * i / 4 + i + 8, 4))
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 5}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = __loc__1, value = (HeapRef 3 to System.Int32[])
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
Initialized types = { VSharp.Test.Tests.Unsafe, System.Runtime.CompilerServices.RuntimeHelpers }

True
MEMORY DUMP:
Path condition: !(1 == i) /\ !(2[4] == 5) /\ 1 == 2[0] /\ 2 == 2[1] /\ 2[2] == 3 /\ 2[3] == 4
--------------- Concrete memory: ---------------
3 ==> System.Int32[]
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 1
        2[1] <- 2
        2[2] <- 3
        2[3] <- 4
        2[4] <- 5
        2[1 + i / 4] <- Combine(Slice(2[1 + i / 4], 0, -4 + -4 * i / 4 + i), Slice(216172782147338240, -i + 4 + 4 * i / 4, -i + 4 + 4 * i / 4 + 4), Slice(2[1 + i / 4], -4 + -4 * i / 4 + i + 8, 4))
        2[2 + i / 4] <- Combine(Slice(2[2 + i / 4], 0, -4 * i / 4 + -8 + i), Slice(216172782147338240, -i + 4 * i / 4 + 8, -i + 4 * i / 4 + 8 + 4), Slice(2[2 + i / 4], -4 * i / 4 + -8 + i + 8, 4))
        2[i / 4] <- Combine(Slice(2[i / 4], 0, -4 * i / 4 + i), Slice(216172782147338240, -i + 4 * i / 4, -i + 4 * i / 4 + 4), Slice(2[i / 4], -4 * i / 4 + i + 8, 4))
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 5}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = __loc__1, value = (HeapRef 3 to System.Int32[])
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
Initialized types = { VSharp.Test.Tests.Unsafe, System.Runtime.CompilerServices.RuntimeHelpers }

True
MEMORY DUMP:
Path condition: !(1 == i) /\ !(2[3] == 4) /\ 1 == 2[0] /\ 2 == 2[1] /\ 2[2] == 3
--------------- Concrete memory: ---------------
3 ==> System.Int32[]
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 1
        2[1] <- 2
        2[2] <- 3
        2[3] <- 4
        2[4] <- 5
        2[1 + i / 4] <- Combine(Slice(2[1 + i / 4], 0, -4 + -4 * i / 4 + i), Slice(216172782147338240, -i + 4 + 4 * i / 4, -i + 4 + 4 * i / 4 + 4), Slice(2[1 + i / 4], -4 + -4 * i / 4 + i + 8, 4))
        2[2 + i / 4] <- Combine(Slice(2[2 + i / 4], 0, -4 * i / 4 + -8 + i), Slice(216172782147338240, -i + 4 * i / 4 + 8, -i + 4 * i / 4 + 8 + 4), Slice(2[2 + i / 4], -4 * i / 4 + -8 + i + 8, 4))
        2[i / 4] <- Combine(Slice(2[i / 4], 0, -4 * i / 4 + i), Slice(216172782147338240, -i + 4 * i / 4, -i + 4 * i / 4 + 4), Slice(2[i / 4], -4 * i / 4 + i + 8, 4))
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 5}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = __loc__1, value = (HeapRef 3 to System.Int32[])
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
Initialized types = { VSharp.Test.Tests.Unsafe, System.Runtime.CompilerServices.RuntimeHelpers }

True
MEMORY DUMP:
Path condition: !(1 == i) /\ !(2[2] == 3) /\ 1 == 2[0] /\ 2 == 2[1]
--------------- Concrete memory: ---------------
3 ==> System.Int32[]
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 1
        2[1] <- 2
        2[2] <- 3
        2[3] <- 4
        2[4] <- 5
        2[1 + i / 4] <- Combine(Slice(2[1 + i / 4], 0, -4 + -4 * i / 4 + i), Slice(216172782147338240, -i + 4 + 4 * i / 4, -i + 4 + 4 * i / 4 + 4), Slice(2[1 + i / 4], -4 + -4 * i / 4 + i + 8, 4))
        2[2 + i / 4] <- Combine(Slice(2[2 + i / 4], 0, -4 * i / 4 + -8 + i), Slice(216172782147338240, -i + 4 * i / 4 + 8, -i + 4 * i / 4 + 8 + 4), Slice(2[2 + i / 4], -4 * i / 4 + -8 + i + 8, 4))
        2[i / 4] <- Combine(Slice(2[i / 4], 0, -4 * i / 4 + i), Slice(216172782147338240, -i + 4 * i / 4, -i + 4 * i / 4 + 4), Slice(2[i / 4], -4 * i / 4 + i + 8, 4))
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 5}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = __loc__1, value = (HeapRef 3 to System.Int32[])
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
Initialized types = { VSharp.Test.Tests.Unsafe, System.Runtime.CompilerServices.RuntimeHelpers }
