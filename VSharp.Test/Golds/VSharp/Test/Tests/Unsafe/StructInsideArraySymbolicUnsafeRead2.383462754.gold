METHOD: System.Boolean VSharp.Test.Tests.Unsafe.StructInsideArraySymbolicUnsafeRead2(System.Int32)
RESULT: Totally 2 states:
True
MEMORY DUMP:
Path condition: 1 == i /\ 216172782113783808 == Combine(Slice(x, -8 * i / 8 + i, -8 * i / 8 + i + 8), Slice(y, -1 + -8 * i / 8 + i, -8 * i / 8 + i + 7), Slice(0, -5 + -8 * i / 8 + i, -8 * i / 8 + i + 3), Slice(0, -6 + -8 * i / 8 + i, -8 * i / 8 + i + 2), Slice(0, -7 + -8 * i / 8 + i, -8 * i / 8 + i + 1), Slice(x, -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 8), Slice(y, -1 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 7), Slice(0, -5 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 3), Slice(0, -6 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 2), Slice(0, -7 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 1))
--------------- Array contents: ---------------
VSharp.Test.Tests.Unsafe+ExplicitStruct[] ==> {
        2[0] <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(2, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4))]
        2[1] <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(4, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(4, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(4, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(4, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(3, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(4, 0, 4), Slice(0, 4, 4)), 3, 4))]
        2[2] <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(6, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(5, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(5, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 3, 4))]
    }
--------------- Array lengths: ---------------
VSharp.Test.Tests.Unsafe+ExplicitStruct[] ==> {2[0] <- 3}
--------------- Types tokens: ---------------
2 ==> VSharp.Test.Tests.Unsafe+ExplicitStruct[]
--------------- Stack: ---------------
key = __loc__0, value = Combine(Slice(x, -8 * i / 8 + i, -8 * i / 8 + i + 8), Slice(y, -1 + -8 * i / 8 + i, -8 * i / 8 + i + 7), Slice(0, -5 + -8 * i / 8 + i, -8 * i / 8 + i + 3), Slice(0, -6 + -8 * i / 8 + i, -8 * i / 8 + i + 2), Slice(0, -7 + -8 * i / 8 + i, -8 * i / 8 + i + 1), Slice(x, -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 8), Slice(y, -1 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 7), Slice(0, -5 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 3), Slice(0, -6 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 2), Slice(0, -7 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 1))
key = __loc__1, value = 0
key = __loc__2, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
key = __tmp__VSharp.Test.Tests.Unsafe+ExplicitStruct, value = VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(6, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(5, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(5, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 3, 4))]
Initialized types = { VSharp.Test.Tests.Unsafe+ExplicitStruct, VSharp.Test.Tests.Unsafe }

True
MEMORY DUMP:
Path condition: !(1 == i)
--------------- Array contents: ---------------
VSharp.Test.Tests.Unsafe+ExplicitStruct[] ==> {
        2[0] <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(2, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4))]
        2[1] <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(4, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(4, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(4, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(4, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(3, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(4, 0, 4), Slice(0, 4, 4)), 3, 4))]
        2[2] <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(6, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(5, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(5, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 3, 4))]
    }
--------------- Array lengths: ---------------
VSharp.Test.Tests.Unsafe+ExplicitStruct[] ==> {2[0] <- 3}
--------------- Types tokens: ---------------
2 ==> VSharp.Test.Tests.Unsafe+ExplicitStruct[]
--------------- Stack: ---------------
key = __loc__0, value = Combine(Slice(x, -8 * i / 8 + i, -8 * i / 8 + i + 8), Slice(y, -1 + -8 * i / 8 + i, -8 * i / 8 + i + 7), Slice(0, -5 + -8 * i / 8 + i, -8 * i / 8 + i + 3), Slice(0, -6 + -8 * i / 8 + i, -8 * i / 8 + i + 2), Slice(0, -7 + -8 * i / 8 + i, -8 * i / 8 + i + 1), Slice(x, -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 8), Slice(y, -1 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 7), Slice(0, -5 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 3), Slice(0, -6 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 2), Slice(0, -7 + -8 + -8 * i / 8 + i, -8 + -8 * i / 8 + i + 1))
key = __loc__1, value = 0
key = __loc__2, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 16)
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 16 + i)
key = __tmp__VSharp.Test.Tests.Unsafe+ExplicitStruct, value = VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(6, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(5, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(6, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(5, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(6, 0, 4), Slice(0, 4, 4)), 3, 4))]
Initialized types = { VSharp.Test.Tests.Unsafe+ExplicitStruct, VSharp.Test.Tests.Unsafe }
