METHOD: System.Boolean VSharp.Test.Tests.Unsafe.ClassSymbolicUnsafeRead(System.Int32)
RESULT: Totally 2 states:
True
MEMORY DUMP:
Path condition: 1 == i /\ 4398046511872 == Combine(Slice(0, 3 + i, 11 + i), Slice(0, 2 + i, 10 + i), Slice(0, 1 + i, 9 + i), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 0, 2), Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 10, 4)), i, 8 + i), Slice(Combine(Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 0, 1), Slice(3, -1, 3), Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 9, 4)), -1 + i, 7 + i), Slice(0, -5 + i, 3 + i), Slice(0, -6 + i, 2 + i), Slice(0, -7 + i, 1 + i), Slice(Combine(Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 8, 4)), -2 + i, 6 + i), Slice(Combine(Slice(0, 0, -4), Slice(4, 0, 4), Slice(0, 4, 4)), -6 + i, 2 + i))
--------------- Fields: ---------------
x ==> {
        2 <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -5), Slice(4, 1, 2), Slice(0, 3, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 0, 2), Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 10, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 0, 1), Slice(3, -1, 3), Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 9, 4))]
    }
y ==> {
        2 <- VSharp.Test.Tests.Unsafe+SequentialStruct STRUCT [
	| x ~> Combine(Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 8, 4))
	| y ~> Combine(Slice(0, 0, -4), Slice(4, 0, 4), Slice(0, 4, 4))]
    }
--------------- Types tokens: ---------------
2 ==> VSharp.Test.Tests.Unsafe+ExplicitClassWithStructsInside
--------------- Stack: ---------------
key = __loc__0, value = VSharp.Test.Tests.Unsafe+SequentialStruct STRUCT [
	| x ~> 3
	| y ~> 4]
key = __loc__1, value = Combine(Slice(0, 3 + i, 11 + i), Slice(0, 2 + i, 10 + i), Slice(0, 1 + i, 9 + i), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 0, 2), Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 10, 4)), i, 8 + i), Slice(Combine(Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 0, 1), Slice(3, -1, 3), Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 9, 4)), -1 + i, 7 + i), Slice(0, -5 + i, 3 + i), Slice(0, -6 + i, 2 + i), Slice(0, -7 + i, 1 + i), Slice(Combine(Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 8, 4)), -2 + i, 6 + i), Slice(Combine(Slice(0, 0, -4), Slice(4, 0, 4), Slice(0, 4, 4)), -6 + i, 2 + i))
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 3)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 3 + i)
key = __tmp__VSharp.Test.Tests.Unsafe+ExplicitStruct, value = VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(2, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4))]
Initialized types = { VSharp.Test.Tests.Unsafe+ExplicitStruct, VSharp.Test.Tests.Unsafe, VSharp.Test.Tests.Unsafe+SequentialStruct, System.Object, VSharp.Test.Tests.Unsafe+ExplicitClassWithStructsInside }

True
MEMORY DUMP:
Path condition: !(1 == i)
--------------- Fields: ---------------
x ==> {
        2 <- VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -5), Slice(4, 1, 2), Slice(0, 3, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 0, 2), Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 10, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 0, 1), Slice(3, -1, 3), Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 9, 4))]
    }
y ==> {
        2 <- VSharp.Test.Tests.Unsafe+SequentialStruct STRUCT [
	| x ~> Combine(Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 8, 4))
	| y ~> Combine(Slice(0, 0, -4), Slice(4, 0, 4), Slice(0, 4, 4))]
    }
--------------- Types tokens: ---------------
2 ==> VSharp.Test.Tests.Unsafe+ExplicitClassWithStructsInside
--------------- Stack: ---------------
key = __loc__0, value = VSharp.Test.Tests.Unsafe+SequentialStruct STRUCT [
	| x ~> 3
	| y ~> 4]
key = __loc__1, value = Combine(Slice(0, 3 + i, 11 + i), Slice(0, 2 + i, 10 + i), Slice(0, 1 + i, 9 + i), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 0, 2), Slice(Combine(Slice(0, 0, 0), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 0, 4), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), -1, 3), Slice(0, 8, 4)), 10, 4)), i, 8 + i), Slice(Combine(Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 0, 1), Slice(3, -1, 3), Slice(Combine(Slice(0, 0, -1), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 1, 5), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 0, 4), Slice(0, -4, 0), Slice(0, 7, 4)), 9, 4)), -1 + i, 7 + i), Slice(0, -5 + i, 3 + i), Slice(0, -6 + i, 2 + i), Slice(0, -7 + i, 1 + i), Slice(Combine(Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 0, 0), Slice(3, 0, 4), Slice(Combine(Slice(0, 0, -2), Slice(Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4)), 2, 6), Slice(Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4)), 1, 5), Slice(0, -3, 1), Slice(0, -4, 0), Slice(0, -5, -1), Slice(0, 6, 4)), 8, 4)), -2 + i, 6 + i), Slice(Combine(Slice(0, 0, -4), Slice(4, 0, 4), Slice(0, 4, 4)), -6 + i, 2 + i))
key = __loc__2, value = 0
key = __loc__3, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Byte, offset = 3)
key = __loc__4, value = (HeapPtr HeapLocation { term = Concrete ([2u], AddressType)
               hc = 659009009 } as System.Int64, offset = 3 + i)
key = __tmp__VSharp.Test.Tests.Unsafe+ExplicitStruct, value = VSharp.Test.Tests.Unsafe+ExplicitStruct STRUCT [
	|  ~> Combine(Slice(0, 0, -4), Slice(2, 4, 5), Slice(0, 0, 1))
	| x ~> Combine(Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 0, 0), Slice(1, 0, 4), Slice(Combine(Slice(0, 0, 1), Slice(2, -1, 3), Slice(0, 5, 4)), 4, 4))
	| y ~> Combine(Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 0, -1), Slice(1, 1, 5), Slice(Combine(Slice(0, 0, 0), Slice(2, 0, 4), Slice(0, 4, 4)), 3, 4))]
Initialized types = { VSharp.Test.Tests.Unsafe+ExplicitStruct, VSharp.Test.Tests.Unsafe, VSharp.Test.Tests.Unsafe+SequentialStruct, System.Object, VSharp.Test.Tests.Unsafe+ExplicitClassWithStructsInside }
