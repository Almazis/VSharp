METHOD: System.Int32 VSharp.Test.Tests.LinqTest.SimpleSymbolicLinqTest(System.Int32, System.Int32, System.Int32)
RESULT: Totally 27 states:
x + y + z
MEMORY DUMP:
Path condition: !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == x % 2 /\ 0 == y % 2 /\ 0 == z % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x + y + z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(x <= 80) /\ y <= 80 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x + z
MEMORY DUMP:
Path condition: !(0 == y % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == x % 2 /\ 0 == z % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x + z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x
MEMORY DUMP:
Path condition: !(x <= 80) /\ 0 == x % 2 /\ y <= 80 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = x
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(0 == y % 2) /\ !(x <= 80) /\ !(y <= 80) /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

z
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(0 == y % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == z % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

y
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(0 == z % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == y % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = y
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = y
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

z
MEMORY DUMP:
Path condition: !(0 == y % 2) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == z % 2 /\ x <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x
MEMORY DUMP:
Path condition: !(0 == y % 2) /\ !(x <= 80) /\ !(y <= 80) /\ 0 == x % 2 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = x
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

y
MEMORY DUMP:
Path condition: !(0 == z % 2) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == y % 2 /\ x <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = y
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = y
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

z
MEMORY DUMP:
Path condition: !(z <= 80) /\ 0 == z % 2 /\ x <= 80 /\ y <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x + z
MEMORY DUMP:
Path condition: !(x <= 80) /\ !(z <= 80) /\ 0 == x % 2 /\ 0 == z % 2 /\ y <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x + z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

y
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(x <= 80) /\ !(y <= 80) /\ 0 == y % 2 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = y
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = y
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

z
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(x <= 80) /\ !(z <= 80) /\ 0 == z % 2 /\ y <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == z % 2) /\ !(z <= 80) /\ x <= 80 /\ y <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

y
MEMORY DUMP:
Path condition: !(y <= 80) /\ 0 == y % 2 /\ x <= 80 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = y
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = y
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: x <= 80 /\ y <= 80 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

y + z
MEMORY DUMP:
Path condition: !(y <= 80) /\ !(z <= 80) /\ 0 == y % 2 /\ 0 == z % 2 /\ x <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = y + z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(0 == y % 2) /\ !(0 == z % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80)
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == y % 2) /\ !(0 == z % 2) /\ !(y <= 80) /\ !(z <= 80) /\ x <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x
MEMORY DUMP:
Path condition: !(0 == z % 2) /\ !(x <= 80) /\ !(z <= 80) /\ 0 == x % 2 /\ y <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = x
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

y + z
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == y % 2 /\ 0 == z % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = y + z
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = z
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x + y
MEMORY DUMP:
Path condition: !(x <= 80) /\ !(y <= 80) /\ 0 == x % 2 /\ 0 == y % 2 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x + y
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = y
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == y % 2) /\ !(y <= 80) /\ x <= 80 /\ z <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

0
MEMORY DUMP:
Path condition: !(0 == x % 2) /\ !(0 == z % 2) /\ !(x <= 80) /\ !(z <= 80) /\ y <= 80
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = 0
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
Initialized types = { System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x
MEMORY DUMP:
Path condition: !(0 == y % 2) /\ !(0 == z % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == x % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = x
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }

x + y
MEMORY DUMP:
Path condition: !(0 == z % 2) /\ !(x <= 80) /\ !(y <= 80) /\ !(z <= 80) /\ 0 == x % 2 /\ 0 == y % 2
--------------- Fields: ---------------
_current ==> {5 <- 0}
_predicate ==> {
        5 <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
_source ==> {5 <- (HeapRef 2 to System.Int32[])}
_state ==> {5 <- -1}
_threadId ==> {5 <- 0}
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- x; 2[1] <- y; 2[2] <- z; 2[3] <- 60}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 4}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
3 ==> VSharp.Test.Tests.LinqTest+<>c
4 ==> System.Func`2[System.Int32,System.Boolean]
5 ==> System.Linq.Enumerable+WhereArrayIterator`1[System.Int32]
--------------- Static fields: ---------------
<>9 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 3 to VSharp.Test.Tests.LinqTest+<>c)
    }
<>9__0_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__1_0 ==> {
        VSharp.Test.Tests.LinqTest+<>c <- (HeapRef 4 to System.Func`2[System.Int32,System.Boolean])
    }
<>9__4_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_2 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_3 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_4 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_5 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__4_6 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_0 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
<>9__7_1 ==> {VSharp.Test.Tests.LinqTest+<>c <- NullRef}
s_commandLineArgs ==> {System.Environment <- NullRef}
s_osVersion ==> {System.Environment <- NullRef}
--------------- Delegates: ---------------
4 ==> <Lambda Expression System.Func`2[System.Int32,System.Boolean]>
--------------- Stack: ---------------
key = __loc__0, value = x + y
key = __loc__1, value = (HeapRef 5 to System.Collections.Generic.IEnumerator`1[System.Int32])
key = __loc__2, value = y
Initialized types = { System.Collections.Generic.IEnumerator`1[System.Int32], System.Object, System.Linq.Enumerable, System.Environment, System.Collections.IEnumerator, VSharp.Test.Tests.LinqTest, VSharp.Test.Tests.LinqTest+<>c, System.Func`2[System.Int32,System.Boolean], System.Linq.Enumerable+Iterator`1[System.Int32], System.Collections.Generic.IEnumerable`1[System.Int32], System.IDisposable, System.Linq.Enumerable+WhereArrayIterator`1[System.Int32] }
