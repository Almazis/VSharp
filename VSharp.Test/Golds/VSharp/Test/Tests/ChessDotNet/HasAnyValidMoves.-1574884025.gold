METHOD: System.Boolean VSharp.Test.Tests.ChessDotNet.HasAnyValidMoves()
RESULT: Totally 1 state:
False
MEMORY DUMP:
--------------- Fields: ---------------
<CachedAt>k__BackingField ==> {17 <- -1; 18 <- -1; 19 <- -1; 20 <- -1; 21 <- -1; 22 <- -1}
<CanBlackCastleKingSide>k__BackingField ==> {2 <- True}
<CanBlackCastleQueenSide>k__BackingField ==> {2 <- True}
<CanWhiteCastleKingSide>k__BackingField ==> {2 <- True}
<CanWhiteCastleQueenSide>k__BackingField ==> {2 <- True}
<HasCastlingAbility>k__BackingField ==> {3 <- True; 4 <- True}
<InitialBlackKingFile>k__BackingField ==> {2 <- 4}
<InitialBlackRookFileKingsideCastling>k__BackingField ==> {2 <- 7}
<InitialBlackRookFileQueensideCastling>k__BackingField ==> {2 <- 0}
<InitialWhiteKingFile>k__BackingField ==> {2 <- 4}
<InitialWhiteRookFileKingsideCastling>k__BackingField ==> {2 <- 7}
<InitialWhiteRookFileQueensideCastling>k__BackingField ==> {2 <- 0}
<Owner>k__BackingField ==> {5 <- 1; 6 <- 0}
<Owner>k__BackingField ==> {7 <- 1; 8 <- 0}
<Owner>k__BackingField ==> {11 <- 1; 12 <- 0}
<Owner>k__BackingField ==> {13 <- 1; 14 <- 0}
<Owner>k__BackingField ==> {9 <- 1; 10 <- 0}
<Owner>k__BackingField ==> {3 <- 1; 4 <- 0}
<Value>k__BackingField ==> {
        17 <- False
        18 <- False
        19 <- False
        20 <- False
        21 <- False
        22 <- False
    }
<WhoseTurn>k__BackingField ==> {2 <- 1}
Board ==> {2 <- (HeapRef 24 to ChessDotNet.Piece[][])}
_drawReason ==> {2 <- NullRef}
_drawn ==> {2 <- False}
_fullMoveNumber ==> {2 <- 1}
_halfMoveClock ==> {2 <- 0}
_items ==> {
        16 <- (HeapRef 15 to ChessDotNet.DetailedMove[])
        23 <- (HeapRef 15 to ChessDotNet.DetailedMove[])
    }
_items ==> {34 <- (HeapRef 33 to ChessDotNet.Move[])}
_moves ==> {
        2 <- (HeapRef 23 to System.Collections.Generic.List`1[ChessDotNet.DetailedMove])
    }
_resigned ==> {2 <- 2}
blackBishop ==> {2 <- (HeapRef 10 to ChessDotNet.Piece)}
blackKing ==> {2 <- (HeapRef 4 to ChessDotNet.Piece)}
blackKnight ==> {2 <- (HeapRef 12 to ChessDotNet.Piece)}
blackPawn ==> {2 <- (HeapRef 14 to ChessDotNet.Piece)}
blackQueen ==> {2 <- (HeapRef 6 to ChessDotNet.Piece)}
blackRook ==> {2 <- (HeapRef 8 to ChessDotNet.Piece)}
checkmatedCacheBlack ==> {
        2 <- (HeapRef 20 to ChessDotNet.Cache`1[System.Boolean])
    }
checkmatedCacheWhite ==> {
        2 <- (HeapRef 19 to ChessDotNet.Cache`1[System.Boolean])
    }
fiftyMoves ==> {2 <- False}
inCheckCacheBlack ==> {
        2 <- (HeapRef 18 to ChessDotNet.Cache`1[System.Boolean])
    }
inCheckCacheWhite ==> {
        2 <- (HeapRef 17 to ChessDotNet.Cache`1[System.Boolean])
    }
list ==> {
        35 <- (HeapRef 34 to System.Collections.Generic.IList`1[ChessDotNet.Move])
    }
stalematedCacheBlack ==> {
        2 <- (HeapRef 22 to ChessDotNet.Cache`1[System.Boolean])
    }
stalematedCacheWhite ==> {
        2 <- (HeapRef 21 to ChessDotNet.Cache`1[System.Boolean])
    }
whiteBishop ==> {2 <- (HeapRef 9 to ChessDotNet.Piece)}
whiteKing ==> {2 <- (HeapRef 3 to ChessDotNet.Piece)}
whiteKnight ==> {2 <- (HeapRef 11 to ChessDotNet.Piece)}
whitePawn ==> {2 <- (HeapRef 13 to ChessDotNet.Piece)}
whiteQueen ==> {2 <- (HeapRef 5 to ChessDotNet.Piece)}
whiteRook ==> {2 <- (HeapRef 7 to ChessDotNet.Piece)}
--------------- Array contents: ---------------
ChessDotNet.Piece[] ==> {
        25[0] <- (HeapRef 8 to ChessDotNet.Piece)
        25[1] <- (HeapRef 12 to ChessDotNet.Piece)
        25[2] <- (HeapRef 10 to ChessDotNet.Piece)
        25[3] <- (HeapRef 6 to ChessDotNet.Piece)
        25[4] <- (HeapRef 4 to ChessDotNet.Piece)
        25[5] <- (HeapRef 10 to ChessDotNet.Piece)
        25[6] <- (HeapRef 12 to ChessDotNet.Piece)
        25[7] <- (HeapRef 8 to ChessDotNet.Piece)
        26[0] <- (HeapRef 14 to ChessDotNet.Piece)
        26[1] <- (HeapRef 14 to ChessDotNet.Piece)
        26[2] <- (HeapRef 14 to ChessDotNet.Piece)
        26[3] <- (HeapRef 14 to ChessDotNet.Piece)
        26[4] <- (HeapRef 14 to ChessDotNet.Piece)
        26[5] <- (HeapRef 14 to ChessDotNet.Piece)
        26[6] <- (HeapRef 14 to ChessDotNet.Piece)
        26[7] <- (HeapRef 14 to ChessDotNet.Piece)
        27[0] <- NullRef
        27[1] <- NullRef
        27[2] <- NullRef
        27[3] <- NullRef
        27[4] <- NullRef
        27[5] <- NullRef
        27[6] <- NullRef
        27[7] <- NullRef
        28[0] <- NullRef
        28[1] <- NullRef
        28[2] <- NullRef
        28[3] <- NullRef
        28[4] <- NullRef
        28[5] <- NullRef
        28[6] <- NullRef
        28[7] <- NullRef
        29[0] <- NullRef
        29[1] <- NullRef
        29[2] <- NullRef
        29[3] <- NullRef
        29[4] <- NullRef
        29[5] <- NullRef
        29[6] <- NullRef
        29[7] <- NullRef
        30[0] <- NullRef
        30[1] <- NullRef
        30[2] <- NullRef
        30[3] <- NullRef
        30[4] <- NullRef
        30[5] <- NullRef
        30[6] <- NullRef
        30[7] <- NullRef
        31[0] <- (HeapRef 13 to ChessDotNet.Piece)
        31[1] <- (HeapRef 13 to ChessDotNet.Piece)
        31[2] <- (HeapRef 13 to ChessDotNet.Piece)
        31[3] <- (HeapRef 13 to ChessDotNet.Piece)
        31[4] <- (HeapRef 13 to ChessDotNet.Piece)
        31[5] <- (HeapRef 13 to ChessDotNet.Piece)
        31[6] <- (HeapRef 13 to ChessDotNet.Piece)
        31[7] <- (HeapRef 13 to ChessDotNet.Piece)
        32[0] <- (HeapRef 7 to ChessDotNet.Piece)
        32[1] <- (HeapRef 11 to ChessDotNet.Piece)
        32[2] <- (HeapRef 9 to ChessDotNet.Piece)
        32[3] <- (HeapRef 5 to ChessDotNet.Piece)
        32[4] <- (HeapRef 3 to ChessDotNet.Piece)
        32[5] <- (HeapRef 9 to ChessDotNet.Piece)
        32[6] <- (HeapRef 11 to ChessDotNet.Piece)
        32[7] <- (HeapRef 7 to ChessDotNet.Piece)
    }
ChessDotNet.Piece[][] ==> {
        24[0] <- (HeapRef 25 to ChessDotNet.Piece[])
        24[1] <- (HeapRef 26 to ChessDotNet.Piece[])
        24[2] <- (HeapRef 27 to ChessDotNet.Piece[])
        24[3] <- (HeapRef 28 to ChessDotNet.Piece[])
        24[4] <- (HeapRef 29 to ChessDotNet.Piece[])
        24[5] <- (HeapRef 30 to ChessDotNet.Piece[])
        24[6] <- (HeapRef 31 to ChessDotNet.Piece[])
        24[7] <- (HeapRef 32 to ChessDotNet.Piece[])
    }
--------------- Array lengths: ---------------
ChessDotNet.DetailedMove[] ==> {15[0] <- 0}
ChessDotNet.Move[] ==> {33[0] <- 0}
ChessDotNet.Piece[] ==> {
        25[0] <- 8
        26[0] <- 8
        27[0] <- 8
        28[0] <- 8
        29[0] <- 8
        30[0] <- 8
        31[0] <- 8
        32[0] <- 8
    }
ChessDotNet.Piece[][] ==> {24[0] <- 8}
--------------- Types tokens: ---------------
2 ==> ChessDotNet.ChessGame
3 ==> ChessDotNet.Pieces.King
4 ==> ChessDotNet.Pieces.King
5 ==> ChessDotNet.Pieces.Queen
6 ==> ChessDotNet.Pieces.Queen
7 ==> ChessDotNet.Pieces.Rook
8 ==> ChessDotNet.Pieces.Rook
9 ==> ChessDotNet.Pieces.Bishop
10 ==> ChessDotNet.Pieces.Bishop
11 ==> ChessDotNet.Pieces.Knight
12 ==> ChessDotNet.Pieces.Knight
13 ==> ChessDotNet.Pieces.Pawn
14 ==> ChessDotNet.Pieces.Pawn
15 ==> ChessDotNet.DetailedMove[]
16 ==> System.Collections.Generic.List`1[ChessDotNet.DetailedMove]
17 ==> ChessDotNet.Cache`1[System.Boolean]
18 ==> ChessDotNet.Cache`1[System.Boolean]
19 ==> ChessDotNet.Cache`1[System.Boolean]
20 ==> ChessDotNet.Cache`1[System.Boolean]
21 ==> ChessDotNet.Cache`1[System.Boolean]
22 ==> ChessDotNet.Cache`1[System.Boolean]
23 ==> System.Collections.Generic.List`1[ChessDotNet.DetailedMove]
24 ==> ChessDotNet.Piece[][]
25 ==> ChessDotNet.Piece[]
26 ==> ChessDotNet.Piece[]
27 ==> ChessDotNet.Piece[]
28 ==> ChessDotNet.Piece[]
29 ==> ChessDotNet.Piece[]
30 ==> ChessDotNet.Piece[]
31 ==> ChessDotNet.Piece[]
32 ==> ChessDotNet.Piece[]
33 ==> ChessDotNet.Move[]
34 ==> System.Collections.Generic.List`1[ChessDotNet.Move]
35 ==> System.Collections.ObjectModel.ReadOnlyCollection`1[ChessDotNet.Move]
--------------- Static fields: ---------------
s_emptyArray ==> {
        System.Collections.Generic.List`1[ChessDotNet.DetailedMove] <- (HeapRef 15 to ChessDotNet.DetailedMove[])
    }
s_emptyArray ==> {
        System.Collections.Generic.List`1[ChessDotNet.Move] <- (HeapRef 33 to ChessDotNet.Move[])
    }
Initialized types = { ChessDotNet.Pieces.Bishop, ChessDotNet.Pieces.Pawn, ChessDotNet.Piece, System.Object, System.Collections.Generic.ICollection`1[ChessDotNet.Move], System.Collections.Generic.List`1[ChessDotNet.DetailedMove], ChessDotNet.Cache`1[System.Boolean], ChessDotNet.Pieces.Queen, ChessDotNet.Pieces.Knight, System.Collections.ObjectModel.ReadOnlyCollection`1[ChessDotNet.Move], ChessDotNet.Pieces.King, System.Collections.Generic.List`1[ChessDotNet.Move], VSharp.Test.Tests.ChessDotNet, ChessDotNet.ChessGame, ChessDotNet.Pieces.Rook }
