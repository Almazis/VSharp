METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod1(System.Int32, System.Int32)
RESULT: (UNION[
	| !(0 == m) ~> 7 + n
	| 0 == m ~> <ERROR: System.DivideByZeroException: Attempted to divide by zero.>], (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod2(System.Int32, System.Int32)
RESULT: (0, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod3(System.Int32, System.Int32, System.Int32)
RESULT: (-11 + c, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.ArithmeticsMethod4(System.Int32, System.Int32)
RESULT: (UNION[
	| !(0 == m * m * m) ~> -126826 + n + n + n + n + n + n
	| 0 == m * m * m ~> <ERROR: System.DivideByZeroException: Attempted to divide by zero.>], (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Arithmetics.IncrementsWorkCorrect(System.Int32)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Arithmetics.Decreasing(System.Int32)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Arithmetics.CheckedUnchecked(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
RESULT: (checked(x0 + unchecked(checked(x2 + x3 + x4) + x1) + unchecked(-(x6 * x7) + x5)), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation1()
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation1(System.Int32)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation2(System.Boolean)
RESULT: (!b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation3(System.Boolean)
RESULT: (b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation4(System.Boolean)
RESULT: (b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Negation5(System.Boolean)
RESULT: (b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And1(System.Boolean, System.Boolean)
RESULT: (a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And2(System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And3(System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And4(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And5(System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And6(System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And7(System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And8(System.Boolean, System.Boolean)
RESULT: (a & b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.And9(System.Boolean, System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or1(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or2(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or3(System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or4(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or5(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or6(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or7(System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or8(System.Boolean, System.Boolean)
RESULT: (a | b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or9(System.Boolean, System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Or10(System.Boolean, System.Boolean, System.Boolean)
RESULT: (a | b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr0(System.Boolean, System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr1(System.Boolean, System.Boolean, System.Boolean)
RESULT: (b & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr2(System.Boolean, System.Boolean, System.Boolean)
RESULT: (!b & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr3(System.Boolean, System.Boolean, System.Boolean)
RESULT: (b | c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr4(System.Boolean, System.Boolean, System.Boolean)
RESULT: (!b | c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr5(System.Boolean, System.Boolean, System.Boolean)
RESULT: (a & b & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr6(System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & b | a & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr7(System.Boolean, System.Boolean, System.Boolean)
RESULT: ((a | b) & (a | c), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr8(System.Boolean, System.Boolean, System.Boolean)
RESULT: (a & b | a & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr9(System.Boolean, System.Boolean, System.Boolean)
RESULT: ((a | b) & (a | c), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr10(System.Boolean, System.Boolean, System.Boolean)
RESULT: (a & b | a & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr11(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a | !b | !c | d, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr12(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & (!a & b | a & c), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr13(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr14(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr15(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: ((!a | !b) & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr16(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!b | a | c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr17(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!b & a | a & c | (!b | !c) & a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr18(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!c | (!a | b) & (!b & a | c), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr19(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (a & b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr20(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr21(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr22(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!b & a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr23(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr24(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: ((!a | !b | !c) & (!a | b) & (!c | a), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.AndOr25(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor3(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: ((!a | !b) & (a | b), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor4(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor5(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor6(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor7(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: ((!a | (!a & !b | !c | a & b) & ((!a | !b) & (a | b) | c)) & (!c & (!a & !b | a & b) | (!a | !b) & (a | b) & c | a), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Xor8(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: ((!a & !b | a & b) & ((!a | !b) & (a | b) | (!a | !b) & (a | b)), (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondAnd1(System.Int32)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondAnd2(System.Int32)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondAnd3(System.Int32)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondOr1(System.Int32)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondOr2(System.Int32)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.CondOr3(System.Int32)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Equal1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Equal2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & !b | a & b, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Equal3(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (True, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.NotEqual1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (!a & b | !b & a, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.NotEqual2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (False, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order1(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (a & b & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order2(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
RESULT: (a & b & c, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order3(System.Int32, System.Int32, System.Int32, System.Int32)
RESULT: (-b + a + -c == 0, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Logics.Order4(System.Int32, System.Int32, System.Int32, System.Int32)
RESULT: (-b + a + -c == 0, (map [], map [], [], []))
METHOD: System.Void VSharp.CSharpUtils.Tests.A.IncN()
RESULT: (UNION[
	| !(0 == addr1) ~> <VOID>
	| 0 == addr1 ~> <ERROR: System.NullReferenceException: Object reference not set to an instance of an object.>], (map [], map [(addr1, STRUCT VSharp.CSharpUtils.Tests.A[
	| _b ~> STRUCT VSharp.CSharpUtils.Tests.B[
		| _c ~> STRUCT VSharp.CSharpUtils.Tests.C[
			| _n ~> UNION[
				| !(0 == addr1) ~> 1 + _n
				| 0 == addr1 ~> _n]]]
	| _intField ~> _intField])], [], []))
METHOD: System.Void VSharp.CSharpUtils.Tests.A.DecN()
RESULT: (UNION[
	| !(0 == addr2) ~> <VOID>
	| 0 == addr2 ~> <ERROR: System.NullReferenceException: Object reference not set to an instance of an object.>], (map [], map [(addr2, STRUCT VSharp.CSharpUtils.Tests.A[
	| _b ~> STRUCT VSharp.CSharpUtils.Tests.B[
		| _c ~> STRUCT VSharp.CSharpUtils.Tests.C[
			| _n ~> UNION[
				| !(0 == addr2) ~> -1 + _n
				| 0 == addr2 ~> _n]]]
	| _intField ~> _intField])], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.A.GetN()
RESULT: (UNION[
	| !(0 == addr3) ~> _n
	| 0 == addr3 ~> <ERROR: System.NullReferenceException: Object reference not set to an instance of an object.>], (map [], map [(addr3, STRUCT VSharp.CSharpUtils.Tests.A[
	| _b ~> STRUCT VSharp.CSharpUtils.Tests.B[
		| _c ~> STRUCT VSharp.CSharpUtils.Tests.C[
			| _n ~> _n]]
	| _intField ~> _intField])], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.B.GetN()
RESULT: (_n, (map [(external data, [STRUCT VSharp.CSharpUtils.Tests.B[
	| _c ~> STRUCT VSharp.CSharpUtils.Tests.C[
		| _n ~> _n]]])], map [], [[external data]], []))
METHOD: System.Void VSharp.CSharpUtils.Tests.B.SetN(System.Int32)
RESULT: (<VOID>, (map [(external data, [STRUCT VSharp.CSharpUtils.Tests.B[
	| _c ~> STRUCT VSharp.CSharpUtils.Tests.C[
		| _n ~> n]]])], map [], [[external data]], []))
METHOD: System.Void VSharp.CSharpUtils.Tests.C.SetN(System.Int32)
RESULT: (<VOID>, (map [(external data, [STRUCT VSharp.CSharpUtils.Tests.C[
	| _n ~> n]])], map [], [[external data]], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.ClassesSimple.Test1(System.Int32)
RESULT: (True, (map [], map [(1, STRUCT VSharp.CSharpUtils.Tests.A[
	| _b ~> STRUCT VSharp.CSharpUtils.Tests.B[
		| _c ~> STRUCT VSharp.CSharpUtils.Tests.C[
			| _n ~> n]]
	| _intField ~> 100500])], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Conditional.IsMaxEven(System.Int32, System.Int32, System.Int32)
RESULT: (UNION[
	| !(2 * y < z) & 2 * x < 2 * y | 2 * x < z & 2 * y < z | (!(2 * x < 2 * y) | 2 * y < z) & (!(2 * x < z) | !(2 * y < z)) ~> !(2 * y < z) & (!(2 * y < z) & 2 * x < 2 * y | 2 * x < z & 2 * y < z) | (!(2 * x < 2 * y) | 2 * y < z) & (!(2 * x < z) | !(2 * y < z)) | (!(2 * y < z) & 2 * x < 2 * y | 2 * x < z & 2 * y < z) & 2 * y < z & 0 == z % 2], (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.Always18()
RESULT: (18, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.EnsureAlwaysN(System.Int32)
RESULT: (n, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Conditional.FirstEvenGreaterThen7()
RESULT: (8, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Fibonacci.Fib2()
RESULT: (2, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Fibonacci.Fib5()
RESULT: (8, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.GCD.Gcd1()
RESULT: (1, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.GCD.Gcd15()
RESULT: (15, (map [], map [], [], []))
METHOD: System.Int32 VSharp.CSharpUtils.Tests.Lambdas.Always18()
RESULT: (18, (map [], map [], [], []))
METHOD: System.Boolean VSharp.CSharpUtils.Tests.Lambdas.DoubleValue(System.Int32, System.Boolean)
RESULT: (True, (map [], map [], [], []))
